.bs-docs-section
	h1#grid.page-header Grid system
	p.lead
		| Bootstrap includes a responsive, mobile first fluid grid system that appropriately scales up to 12 columns as the device or viewport size increases. It includes 
		a(href='#grid-example-basic') predefined classes
		|  for easy layout options, as well as powerful 
		a(href='#grid-less') mixins for generating more semantic layouts
		| .
	h2#grid-intro Introduction
	p
		| Grid systems are used for creating page layouts through a series of rows and columns that house your content. Here's how the Bootstrap grid system works:
	ul
		li
			| Rows must be placed within a 
			code .container
			|  (fixed-width) or 
			code .container-fluid
			|  (full-width) for proper alignment and padding.
		li Use rows to create horizontal groups of columns.
		li
			| Content should be placed within columns, and only columns may be immediate children of rows.
		li
			| Predefined grid classes like 
			code .row
			|  and 
			code .col-xs-4
			|  are available for quickly making grid layouts. Less mixins can also be used for more semantic layouts.
		li
			| Columns create gutters (gaps between column content) via 
			code padding
			| . That padding is offset in rows for the first and last column via negative margin on 
			code .row
			| s.
		li
			| The negative margin is why the examples below are outdented. It's so that content within grid columns is lined up with non-grid content.
		li
			| Grid columns are created by specifying the number of twelve available columns you wish to span. For example, three equal columns would use three 
			code .col-xs-4
			| .
		li
			| If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.
		li
			| Grid classes apply to devices with screen widths greater than or equal to the breakpoint sizes, and override grid classes targeted at smaller devices. Therefore, e.g. applying any 
			code .col-md-*
			|  class to an element will not only affect its styling on medium devices but also on large devices if a 
			code .col-lg-*
			|  class is not present.
	p Look to the examples for applying these principles to your code.
	h2#grid-media-queries Media queries
	p
		| We use the following media queries in our Less files to create the key breakpoints in our grid system.
	| {% highlight scss %}
	| /* Extra small devices (phones, less than 768px) */
	| /* No media query since this is the default in Bootstrap */
	| /* Small devices (tablets, 768px and up) */
	| @media (min-width: @screen-sm-min) { ... }
	| /* Medium devices (desktops, 992px and up) */
	| @media (min-width: @screen-md-min) { ... }
	| /* Large devices (large desktops, 1200px and up) */
	| @media (min-width: @screen-lg-min) { ... }
	| {% endhighlight %}
	p
		| We occasionally expand on these media queries to include a 
		code max-width
		|  to limit CSS to a narrower set of devices.
	| {% highlight scss %}
	| @media (max-width: @screen-xs-max) { ... }
	| @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) { ... }
	| @media (min-width: @screen-md-min) and (max-width: @screen-md-max) { ... }
	| @media (min-width: @screen-lg-min) { ... }
	| {% endhighlight %}
	h2#grid-options Grid options
	p
		| See how aspects of the Bootstrap grid system work across multiple devices with a handy table.
	.table-responsive
		table.table.table-bordered.table-striped
			thead
				tr
					th
					th
						| Extra small devices
						small Phones (<768px)
					th
						| Small devices
						small Tablets (≥768px)
					th
						| Medium devices
						small Desktops (≥992px)
					th
						| Large devices
						small Desktops (≥1200px)
			tbody
				tr
					th.text-nowrap(scope='row') Grid behavior
					td Horizontal at all times
					td(colspan='3') Collapsed to start, horizontal above breakpoints
				tr
					th.text-nowrap(scope='row') Container width
					td None (auto)
					td 750px
					td 970px
					td 1170px
				tr
					th.text-nowrap(scope='row') Class prefix
					td
						code .col-xs-
					td
						code .col-sm-
					td
						code .col-md-
					td
						code .col-lg-
				tr
					th.text-nowrap(scope='row') # of columns
					td(colspan='4') 12
				tr
					th.text-nowrap(scope='row') Column width
					td.text-muted Auto
					td ~62px
					td ~81px
					td ~97px
				tr
					th.text-nowrap(scope='row') Gutter width
					td(colspan='4') 30px (15px on each side of a column)
				tr
					th.text-nowrap(scope='row') Nestable
					td(colspan='4') Yes
				tr
					th.text-nowrap(scope='row') Offsets
					td(colspan='4') Yes
				tr
					th.text-nowrap(scope='row') Column ordering
					td(colspan='4') Yes
	h2#grid-example-basic Example: Stacked-to-horizontal
	p
		| Using a single set of 
		code .col-md-*
		|  grid classes, you can create a basic grid system that starts out stacked on mobile devices and tablet devices (the extra small to small range) before becoming horizontal on desktop (medium) devices. Place grid columns in any 
		code .row
		| .
	.row.show-grid
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
	.row.show-grid
		.col-md-8 .col-md-8
		.col-md-4 .col-md-4
	.row.show-grid
		.col-md-4 .col-md-4
		.col-md-4 .col-md-4
		.col-md-4 .col-md-4
	.row.show-grid
		.col-md-6 .col-md-6
		.col-md-6 .col-md-6
	| {% highlight html %}
	.row
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
		.col-md-1 .col-md-1
	.row
		.col-md-8 .col-md-8
		.col-md-4 .col-md-4
	.row
		.col-md-4 .col-md-4
		.col-md-4 .col-md-4
		.col-md-4 .col-md-4
	.row
		.col-md-6 .col-md-6
		.col-md-6 .col-md-6
	| {% endhighlight %}
	h2#grid-example-fluid Example: Fluid container
	p
		| Turn any fixed-width grid layout into a full-width layout by changing your outermost 
		code .container
		|  to 
		code .container-fluid
		| .
	| {% highlight html %}
	.container-fluid
		.row
			| ...
	| {% endhighlight %}
	h2#grid-example-mixed Example: Mobile and desktop
	p
		| Don't want your columns to simply stack in smaller devices? Use the extra small and medium device grid classes by adding 
		code .col-xs-*
		code .col-md-*
		|  to your columns. See the example below for a better idea of how it all works.
	.row.show-grid
		.col-xs-12.col-md-8 .col-xs-12 .col-md-8
		.col-xs-6.col-md-4 .col-xs-6 .col-md-4
	.row.show-grid
		.col-xs-6.col-md-4 .col-xs-6 .col-md-4
		.col-xs-6.col-md-4 .col-xs-6 .col-md-4
		.col-xs-6.col-md-4 .col-xs-6 .col-md-4
	.row.show-grid
		.col-xs-6 .col-xs-6
		.col-xs-6 .col-xs-6
	| {% highlight html %}
	// Stack the columns on mobile by making one full-width and the other half-width
	.row
		.col-xs-12.col-md-8 .col-xs-12 .col-md-8
		.col-xs-6.col-md-4 .col-xs-6 .col-md-4
	// Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop
	.row
		.col-xs-6.col-md-4 .col-xs-6 .col-md-4
		.col-xs-6.col-md-4 .col-xs-6 .col-md-4
		.col-xs-6.col-md-4 .col-xs-6 .col-md-4
	// Columns are always 50% wide, on mobile and desktop
	.row
		.col-xs-6 .col-xs-6
		.col-xs-6 .col-xs-6
	| {% endhighlight %}
	h2#grid-example-mixed-complete Example: Mobile, tablet, desktop
	p
		| Build on the previous example by creating even more dynamic and powerful layouts with tablet 
		code .col-sm-*
		|  classes.
	.row.show-grid
		.col-xs-12.col-sm-6.col-md-8 .col-xs-12 .col-sm-6 .col-md-8
		.col-xs-6.col-md-4 .col-xs-6 .col-md-4
	.row.show-grid
		.col-xs-6.col-sm-4 .col-xs-6 .col-sm-4
		.col-xs-6.col-sm-4 .col-xs-6 .col-sm-4
		// Optional: clear the XS cols if their content doesn't match in height
		.clearfix.visible-xs-block
		.col-xs-6.col-sm-4 .col-xs-6 .col-sm-4
	| {% highlight html %}
	.row
		.col-xs-12.col-sm-6.col-md-8 .col-xs-12 .col-sm-6 .col-md-8
		.col-xs-6.col-md-4 .col-xs-6 .col-md-4
	.row
		.col-xs-6.col-sm-4 .col-xs-6 .col-sm-4
		.col-xs-6.col-sm-4 .col-xs-6 .col-sm-4
		// Optional: clear the XS cols if their content doesn't match in height
		.clearfix.visible-xs-block
		.col-xs-6.col-sm-4 .col-xs-6 .col-sm-4
	| {% endhighlight %}
	h2#grid-example-wrapping Example: Column wrapping
	p
		| If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.
	.row.show-grid
		.col-xs-9 .col-xs-9
		.col-xs-4
			| .col-xs-4
			br
			| Since 9 + 4 = 13 > 12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.
		.col-xs-6
			| .col-xs-6
			br
			| Subsequent columns continue along the new line.
	| {% highlight html %}
	.row
		.col-xs-9 .col-xs-9
		.col-xs-4
			| .col-xs-4
			br
			| Since 9 + 4 = 13 > 12, this 4-column-wide div gets wrapped onto a new line as one contiguous unit.
		.col-xs-6
			| .col-xs-6
			br
			| Subsequent columns continue along the new line.
	| {% endhighlight %}
	h2#grid-responsive-resets Responsive column resets
	p
		| With the four tiers of grids available you're bound to run into issues where, at certain breakpoints, your columns don't clear quite right as one is taller than the other. To fix that, use a combination of a 
		code .clearfix
		|  and our 
		a(href='#responsive-utilities') responsive utility classes
		| .
	.row.show-grid
		.col-xs-6.col-sm-3
			| .col-xs-6 .col-sm-3
			br
			| 			Resize your viewport or check it out on your phone for an example.
		.col-xs-6.col-sm-3 .col-xs-6 .col-sm-3
		// Add the extra clearfix for only the required viewport
		.clearfix.visible-xs-block
		.col-xs-6.col-sm-3 .col-xs-6 .col-sm-3
		.col-xs-6.col-sm-3 .col-xs-6 .col-sm-3
	| {% highlight html %}
	.row
		.col-xs-6.col-sm-3 .col-xs-6 .col-sm-3
		.col-xs-6.col-sm-3 .col-xs-6 .col-sm-3
		// Add the extra clearfix for only the required viewport
		.clearfix.visible-xs-block
		.col-xs-6.col-sm-3 .col-xs-6 .col-sm-3
		.col-xs-6.col-sm-3 .col-xs-6 .col-sm-3
	| {% endhighlight %}
	p
		| In addition to column clearing at responsive breakpoints, you may need to 
		strong reset offsets, pushes, or pulls
		| . See this in action in 
		a(href='../examples/grid/') the grid example
		| .
	| {% highlight html %}
	.row
		.col-sm-5.col-md-6 .col-sm-5 .col-md-6
		.col-sm-5.col-sm-offset-2.col-md-6.col-md-offset-0 .col-sm-5 .col-sm-offset-2 .col-md-6 .col-md-offset-0
	.row
		.col-sm-6.col-md-5.col-lg-6 .col-sm-6 .col-md-5 .col-lg-6
		.col-sm-6.col-md-5.col-md-offset-2.col-lg-6.col-lg-offset-0 .col-sm-6 .col-md-5 .col-md-offset-2 .col-lg-6 .col-lg-offset-0
	| {% endhighlight %}
	h2#grid-offsetting Offsetting columns
	p
		| Move columns to the right using 
		code .col-md-offset-*
		|  classes. These classes increase the left margin of a column by 
		code *
		|  columns. For example, 
		code .col-md-offset-4
		|  moves 
		code .col-md-4
		|  over four columns.
	.row.show-grid
		.col-md-4 .col-md-4
		.col-md-4.col-md-offset-4 .col-md-4 .col-md-offset-4
	.row.show-grid
		.col-md-3.col-md-offset-3 .col-md-3 .col-md-offset-3
		.col-md-3.col-md-offset-3 .col-md-3 .col-md-offset-3
	.row.show-grid
		.col-md-6.col-md-offset-3 .col-md-6 .col-md-offset-3
	| {% highlight html %}
	.row
		.col-md-4 .col-md-4
		.col-md-4.col-md-offset-4 .col-md-4 .col-md-offset-4
	.row
		.col-md-3.col-md-offset-3 .col-md-3 .col-md-offset-3
		.col-md-3.col-md-offset-3 .col-md-3 .col-md-offset-3
	.row
		.col-md-6.col-md-offset-3 .col-md-6 .col-md-offset-3
	| {% endhighlight %}
	h2#grid-nesting Nesting columns
	p
		| To nest your content with the default grid, add a new 
		code .row
		|  and set of 
		code .col-sm-*
		|  columns within an existing 
		code .col-sm-*
		|  column. Nested rows should include a set of columns that add up to 12 or fewer (it is not required that you use all 12 available columns).
	.row.show-grid
		.col-sm-9
			| Level 1: .col-sm-9
			.row.show-grid
				.col-xs-8.col-sm-6
					| Level 2: .col-xs-8 .col-sm-6
				.col-xs-4.col-sm-6
					| Level 2: .col-xs-4 .col-sm-6
	| {% highlight html %}
	.row
		.col-sm-9
			| Level 1: .col-sm-9
			.row
				.col-xs-8.col-sm-6
					| Level 2: .col-xs-8 .col-sm-6
				.col-xs-4.col-sm-6
					| Level 2: .col-xs-4 .col-sm-6
	| {% endhighlight %}
	h2#grid-column-ordering Column ordering
	p
		| Easily change the order of our built-in grid columns with 
		code .col-md-push-*
		|  and 
		code .col-md-pull-*
		|  modifier classes.
	.row.show-grid
		.col-md-9.col-md-push-3 .col-md-9 .col-md-push-3
		.col-md-3.col-md-pull-9 .col-md-3 .col-md-pull-9
	| {% highlight html %}
	.row
		.col-md-9.col-md-push-3 .col-md-9 .col-md-push-3
		.col-md-3.col-md-pull-9 .col-md-3 .col-md-pull-9
	| {% endhighlight %}
	h2#grid-less Less mixins and variables
	p
		| In addition to 
		a(href='#grid-example-basic') prebuilt grid classes
		|  for fast layouts, Bootstrap includes Less variables and mixins for quickly generating your own simple, semantic layouts.
	h3 Variables
	p
		| Variables determine the number of columns, the gutter width, and the media query point at which to begin floating columns. We use these to generate the predefined grid classes documented above, as well as for the custom mixins listed below.
	| {% highlight scss %}
	| @grid-columns:              12;
	| @grid-gutter-width:         30px;
	| @grid-float-breakpoint:     768px;
	| {% endhighlight %}
	h3 Mixins
	p
		| Mixins are used in conjunction with the grid variables to generate semantic CSS for individual grid columns.
	| {% highlight scss %}
	| // Creates a wrapper for a series of columns
	| .make-row(@gutter: @grid-gutter-width) {
	| 	// Then clear the floated columns
	| 	.clearfix();
	| 	@media (min-width: @screen-sm-min) {
	| 		margin-left:  (@gutter / -2);
	| 		margin-right: (@gutter / -2);
	| 	}
	| 	// Negative margin nested rows out to align the content of columns
	| 	.row {
	| 		margin-left:  (@gutter / -2);
	| 		margin-right: (@gutter / -2);
	| 	}
	| }
	| // Generate the extra small columns
	| .make-xs-column(@columns; @gutter: @grid-gutter-width) {
	| 	position: relative;
	| 	// Prevent columns from collapsing when empty
	| 	min-height: 1px;
	| 	// Inner gutter via padding
	| 	padding-left:  (@gutter / 2);
	| 	padding-right: (@gutter / 2);
	| 	// Calculate width based on number of columns available
	| 	@media (min-width: @grid-float-breakpoint) {
	| 		float: left;
	| 		width: percentage((@columns / @grid-columns));
	| 	}
	| }
	| // Generate the small columns
	| .make-sm-column(@columns; @gutter: @grid-gutter-width) {
	| 	position: relative;
	| 	// Prevent columns from collapsing when empty
	| 	min-height: 1px;
	| 	// Inner gutter via padding
	| 	padding-left:  (@gutter / 2);
	| 	padding-right: (@gutter / 2);
	| 	// Calculate width based on number of columns available
	| 	@media (min-width: @screen-sm-min) {
	| 		float: left;
	| 		width: percentage((@columns / @grid-columns));
	| 	}
	| }
	| // Generate the small column offsets
	| .make-sm-column-offset(@columns) {
	| 	@media (min-width: @screen-sm-min) {
	| 		margin-left: percentage((@columns / @grid-columns));
	| 	}
	| }
	| .make-sm-column-push(@columns) {
	| 	@media (min-width: @screen-sm-min) {
	| 		left: percentage((@columns / @grid-columns));
	| 	}
	| }
	| .make-sm-column-pull(@columns) {
	| 	@media (min-width: @screen-sm-min) {
	| 		right: percentage((@columns / @grid-columns));
	| 	}
	| }
	| // Generate the medium columns
	| .make-md-column(@columns; @gutter: @grid-gutter-width) {
	| 	position: relative;
	| 	// Prevent columns from collapsing when empty
	| 	min-height: 1px;
	| 	// Inner gutter via padding
	| 	padding-left:  (@gutter / 2);
	| 	padding-right: (@gutter / 2);
	| 	// Calculate width based on number of columns available
	| 	@media (min-width: @screen-md-min) {
	| 		float: left;
	| 		width: percentage((@columns / @grid-columns));
	| 	}
	| }
	| // Generate the medium column offsets
	| .make-md-column-offset(@columns) {
	| 	@media (min-width: @screen-md-min) {
	| 		margin-left: percentage((@columns / @grid-columns));
	| 	}
	| }
	| .make-md-column-push(@columns) {
	| 	@media (min-width: @screen-md-min) {
	| 		left: percentage((@columns / @grid-columns));
	| 	}
	| }
	| .make-md-column-pull(@columns) {
	| 	@media (min-width: @screen-md-min) {
	| 		right: percentage((@columns / @grid-columns));
	| 	}
	| }
	| // Generate the large columns
	| .make-lg-column(@columns; @gutter: @grid-gutter-width) {
	| 	position: relative;
	| 	// Prevent columns from collapsing when empty
	| 	min-height: 1px;
	| 	// Inner gutter via padding
	| 	padding-left:  (@gutter / 2);
	| 	padding-right: (@gutter / 2);
	| 	// Calculate width based on number of columns available
	| 	@media (min-width: @screen-lg-min) {
	| 		float: left;
	| 		width: percentage((@columns / @grid-columns));
	| 	}
	| }
	| // Generate the large column offsets
	| .make-lg-column-offset(@columns) {
	| 	@media (min-width: @screen-lg-min) {
	| 		margin-left: percentage((@columns / @grid-columns));
	| 	}
	| }
	| .make-lg-column-push(@columns) {
	| 	@media (min-width: @screen-lg-min) {
	| 		left: percentage((@columns / @grid-columns));
	| 	}
	| }
	| .make-lg-column-pull(@columns) {
	| 	@media (min-width: @screen-lg-min) {
	| 		right: percentage((@columns / @grid-columns));
	| 	}
	| }
	| {% endhighlight %}
	h3 Example usage
	p
		| You can modify the variables to your own custom values, or just use the mixins with their default values. Here's an example of using the default settings to create a two-column layout with a gap between.
	| {% highlight scss %}
	| .wrapper {
	| 	.make-row();
	| }
	| .content-main {
	| 	.make-lg-column(8);
	| }
	| .content-secondary {
	| 	.make-lg-column(3);
	| 	.make-lg-column-offset(1);
	| }
	| {% endhighlight %}
	| {% highlight html %}
	.wrapper
		.content-main ...
		.content-secondary ...
	| {% endhighlight %}
